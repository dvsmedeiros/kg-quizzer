<think>
Okay, I need to generate 10 question-answer pairs in CSV format based on the context provided, which is "Teoria da complexidade computacional". The user wants the questions to be varied and cover different aspects of the content, with each answer being directly from the context or inferable from it. Let me start by recalling the key points of computational complexity theory.

First, the main complexity classes: P, NP, NP-complete, NP-hard. Then, the P vs NP problem, which is a famous open question. Also, the concept of polynomial time vs exponential time. Reductions between problems, like NP-completeness proofs. Examples of problems in each class, like SAT for NP-complete, sorting algorithms for P. Time hierarchy theorem, which separates complexity classes based on time. Space complexity classes like PSPACE. The importance of the halting problem in computability, but maybe not directly in complexity. Also, the classes like EXP and NEXP. Approximation algorithms and their relation to complexity. The concept of oracles in complexity theory. And maybe the difference between deterministic and non-deterministic Turing machines.

Now, I need to make sure each question is unique and covers different aspects. Let me list possible questions:

1. What is the primary distinction between the complexity classes P and NP?
2. Which problem is a classic example of an NP-complete problem?
3. What does the P vs NP problem question?
4. What is the significance of polynomial time in computational complexity?
5. What is a reduction in the context of complexity theory?
6. Which complexity class contains all problems solvable in polynomial time by a deterministic Turing machine?
7. What is the time hierarchy theorem used for?
8. What is the relationship between NP and PSPACE?
9. Which of the following is a well-known problem in the class P?
10. What is the role of oracles in complexity theory?

Now, checking if these are all distinct and cover different areas. The first question is about P vs NP. The second is about NP-complete examples. Third is P vs NP question. Fourth is polynomial time significance. Fifth is reductions. Sixth is P class. Seventh is time hierarchy. Eighth is NP vs PSPACE. Ninth is P examples. Tenth is oracles.

Now, make sure answers are correct. Let's verify:

1. P problems can be solved in polynomial time, NP problems can be verified in polynomial time.
2. SAT is NP-complete.
3. Whether P equals NP.
4. Polynomial time is considered efficient.
5. Reduction is a method to transform one problem into another.
6. P.
7. To show that different complexity classes are distinct.
8. NP is a subset of PSPACE.
9. Sorting algorithms.
10. Oracles are hypothetical devices used to study complexity classes.

That seems correct. Now, format them into CSV with semicolons. Make sure no markdown, just the CSV lines. Also, ensure all are in Portuguese. Let me translate the questions and answers into Portuguese:

1. Qual a principal diferença entre as classes de complexidade P e NP?
2. Qual é um exemplo clássico de problema NP-completo?
3. O que a questão P vs NP questiona?
4. Qual a importância do tempo polinomial na teoria da complexidade?
5. O que é uma redução no contexto da teoria da complexidade?
6. Qual classe de complexidade contém todos os problemas solúveis em tempo polinomial por uma máquina de Turing determinística?
7. Para que serve o teorema da hierarquia de tempo?
8. Qual a relação entre NP e PSPACE?
9. Qual dos seguintes problemas é bem conhecido na classe P?
10. Qual é o papel dos oráculos na teoria da complexidade?

Respostas:

1. A classe P inclui problemas que podem ser resolvidos em tempo polinomial por uma máquina de Turing determinística, enquanto a classe NP inclui problemas cujas soluções podem ser verificadas em tempo polinomial.
2. O problema SAT (Satisfatibilidade Booleana).
3. Se P é igual a NP ou não.
4. O tempo polinomial é considerado eficiente, e problemas com esse tempo de execução são considerados facilmente solúveis.
5. Uma redução é uma técnica usada para transformar um problema em outro, demonstrando que um problema é pelo menos tão difícil quanto outro.
6. P.
7. Para mostrar que diferentes classes de complexidade são distintas.
8. NP é um subconjunto de PSPACE.
9. Algoritmos de ordenação, como o QuickSort.
10. Oráculos são dispositivos hipotéticos usados para estudar classes de complexidade e distinguir entre diferentes níveis de dificuldade computacional.

Now, format each pair as "pergunta;resposta" and list them in CSV format as specified.
</think>

pergunta;resposta
Qual a principal diferença entre as classes de complexidade P e NP?;A classe P inclui problemas que podem ser resolvidos em tempo polinomial por uma máquina de Turing determinística, enquanto a classe NP inclui problemas cujas soluções podem ser verificadas em tempo polinomial.
Qual é um exemplo clássico de problema NP-completo?;O problema SAT (Satisfatibilidade Booleana).
O que a questão P vs NP questiona?;Se P é igual a NP ou não.
Qual a importância do tempo polinomial na teoria da complexidade?;O tempo polinomial é considerado eficiente, e problemas com esse tempo de execução são considerados facilmente solúveis.
O que é uma redução no contexto da teoria da complexidade?;Uma redução é uma técnica usada para transformar um problema em outro, demonstrando que um problema é pelo menos tão difícil quanto outro.
Qual classe de complexidade contém todos os problemas solúveis em tempo polinomial por uma máquina de Turing determinística?;P.
Para que serve o teorema da hierarquia de tempo?;Para mostrar que diferentes classes de complexidade são distintas.
Qual a relação entre NP e PSPACE?;NP é um subconjunto de PSPACE.
Qual dos seguintes problemas é bem conhecido na classe P?;Algoritmos de ordenação, como o QuickSort.
Qual é o papel dos oráculos na teoria da complexidade?;Oráculos são dispositivos hipotéticos usados para estudar classes de complexidade e distinguir entre diferentes níveis de dificuldade computacional.