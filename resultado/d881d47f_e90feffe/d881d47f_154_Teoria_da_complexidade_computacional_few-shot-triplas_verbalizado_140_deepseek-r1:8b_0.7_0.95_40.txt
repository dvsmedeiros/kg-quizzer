<think>
Okay, I need to generate 10 pairs of questions and correct answers based on the provided context about computational complexity theory. Let me go through the facts and context carefully.

First, the context mentions that computational complexity theory deals with classifying problems computationally based on resource usage. The theory is theoretical in nature and involves mathematical methods. It's related to fields like algorithm analysis and computational theory.

Looking at the facts, I see a list of people associated with computational complexity theory, such as Nikolai Sergeevich Bakhvalov, Jelani Nelson, Ryan Williams, Vijay Vazirani, etc. This suggests that the theory is an established area within computer science, taught by many researchers and used in various contexts.

I should create questions that cover different aspects of this theory. Let me think about key concepts: what it is, its focus, main resource measurements (time and space), classification of problems, methods like big-O notation, applications, and notable contributors.

For each question, I need a clear, unique answer based on the context. Let's start listing possible questions:

1. What is the primary focus of computational complexity theory?
2. Which resource primarily measured by computational complexity theory?
3. How are problems classified in this theory?
4. What does big-O notation (big Θ) represent?
5. What is the main goal when applying this theory in practice?
6. Who is known for contributing significantly to it?

Wait, I need 10, so let me think more:

6. Which two basic resources are used to measure complexity?
7. What does the P vs NP problem relate to?
8. What is a computational problem?
9. Which fields within CS use this theory as a foundation?
10. How does the theory help in understanding algorithm efficiency?

Now, ensuring each has a clear answer from context.

1. Primary focus: Classifying problems by their resource usage.
2. Resource: Time and space mainly.
3. Classification: Based on classes like P, NP, etc.
4. Big-Θ: Represents asymptotic behavior of algorithms.
5. Practical goal: Determining what computers can feasibly do.
6. Contributors include many researchers listed in the facts.
7. P vs NP is a classic problem related to complexity theory.
8. Computational problem: A task solved by a computer algorithm.
9. Fields: Analysis of algorithms and computational theory.
10. Theory helps quantify resource requirements.

Now, I'll structure these into questions with correct answers, ensuring they're distinct and cover various aspects without repeating similar structures.
</think>

```
pergunta;resposta
Qual é o principal objetivo da teoria da complexidade computacional?;classificar problemas computacionais segundo seu uso de recursos
Quais são os principais recursos usados para medir a complexidade?;tempo e armazenamento
O que define uma tarefa que pode ser resolvida por um computador?;problemas computacionais
Qual é a classificação mais ampla de problemas computacionais?;P, NP, NP-Completo, etc.
Que modelo matemático é usado para avaliar recursos necessários?;modelos de big-O (big Θ)
Qual é a principal unidade medida na teoria da complexidade?;Número de operações ou instruções
Qual é o papel prático da teoria na computação cotidiana?;Determinar os limites do que um computador pode fazer
Quem contribuiu significativamente para a teoria?;Nikolai Sergeevich Bakhvalov, Jelani Nelson, Ryan Williams, Vijay Vazirani entre outros
Qual é o problema mais famoso relacionado à teoria?;Problema P vs. NP
O que define um problema computacional?;Uma tarefa resolvida por um algoritmo de computador
Quais campos da ciência da computação são afetados pela teoria?;Análise de algoritmos e teoria da computabilidade
 Como a teoria ajuda a entender a eficiência dos algoritmos?;Quantifica os recursos necessários para resolver problemas
```