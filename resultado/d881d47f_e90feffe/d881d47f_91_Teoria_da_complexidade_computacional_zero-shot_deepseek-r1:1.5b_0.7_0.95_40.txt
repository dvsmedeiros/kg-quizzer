<think>
Okay, so I need to create these 10 objective questions based on the context of computational complexity theory. Let me start by understanding what each question should cover.

First, I'll think about different aspects of computational complexity: time complexity, space complexity, decision problems, minimization vs maximization principles, counting problems, and reducibility between problems. Each question should have a clear answer that directly relates to the course material.

For the first question, I can ask about the relationship between Big-Omega notation and time complexity. That seems straightforward because Omega is used for lower bounds. So a question like "Explain the difference between big-Omega Ω(n) and big-O big-Ω(n)."

Moving on to the second question, space complexity uses Theta notation. So maybe ask about how memory usage relates to algorithm efficiency.

Third question could be about decision vs optimization problems, which are fundamental in complexity theory.

For counting problems, I can ask whether a problem is considered hard if it's NP-hard or not, which ties into reductions and NP-completeness.

Minimization and maximization principles might have questions that test understanding of minimax theorems.

Then, reducibility between classes would involve showing how one problem can be transformed into another from complexity theory.

I should ensure each question has a clear answer. For example, for the first question, knowing that Omega gives a lower bound on time complexity is enough to answer it.

Let me check if all questions cover different areas and are clear in their answers before finalizing.
</think>

```csv
pergunta;resposta
big-omega Ω(n) vs big-O Big-Ω(n); explain the difference between big-Omega notation Ω(n) and big-O Big-Ω(n)
space complexity Theta(n); how is space complexity measured and analyzed in algorithms?
decision vs optimization problems; define decision problems and contrast them with optimization problems
NP-hardness minimax theorem; when does a problem become NP-hard according to the minimax theorem
reducibility between classes; describe a simple reduction from one complexity class to another
```