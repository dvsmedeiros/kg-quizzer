<think>
Okay, I need to generate 10 pairs of questions and answers in Portuguese based on the context of "Teoria_da_complexidade_computacional". Let me start by recalling what computational complexity theory covers. It includes concepts like P, NP, NP-complete, NP-hard, time complexity, space complexity, reductions, and problems like the Traveling Salesman Problem or the Boolean Satisfiability Problem.

First, I should make sure each question is distinct and covers different aspects. Let me brainstorm possible topics:

1. Definitions of P and NP.
2. NP-complete problems.
3. NP-hard vs. NP-complete.
4. Time complexity classes.
5. Space complexity.
6. Reductions in complexity.
7. The significance of the P vs NP problem.
8. Examples of NP-complete problems.
9. The role of polynomial-time algorithms.
10. The concept of tractability.

Now, I need to phrase these as questions in Portuguese. Let me check each one:

1. What is the definition of the complexity class P?
2. What characterizes the complexity class NP?
3. What are NP-complete problems?
4. How does NP-hard differ from NP-complete?
5. What is the time complexity of an algorithm?
6. What is the space complexity of an algorithm?
7. What is the purpose of polynomial-time reduction?
8. What is the significance of the P vs NP problem?
9. What is an example of an NP-complete problem?
10. What does it mean for a problem to be tractable?

Now, I need to ensure the answers are correct and based on the context. Let me verify each answer:

1. P is the set of decision problems solvable by a deterministic Turing machine in polynomial time.
2. NP is the set of decision problems for which a solution can be verified by a deterministic Turing machine in polynomial time.
3. NP-complete problems are the hardest problems in NP; if any NP-complete problem can be solved in polynomial time, then all NP problems can be.
4. NP-hard problems are at least as hard as the hardest problems in NP, but they do not necessarily belong to NP.
5. Time complexity refers to the amount of time an algorithm takes to run as a function of the input size.
6. Space complexity refers to the amount of memory an algorithm uses as a function of the input size.
7. Polynomial-time reduction is used to show that one problem can be transformed into another in polynomial time, implying they are equally hard.
8. The P vs NP problem asks whether every problem whose solution can be verified quickly can also be solved quickly, with implications for cryptography, optimization, etc.
9. The Traveling Salesman Problem is an example of an NP-complete problem.
10. A tractable problem is one that can be solved efficiently, typically in polynomial time.

I need to check for repetition and ensure each question is unique. Also, make sure the answers are concise and correct. Now, format them into CSV with semicolons. Let me write them out.
</think>

pergunta;resposta
O que caracteriza a classe de complexidade P?;A classe de problemas decidíveis que podem ser resolvidos por uma máquina de Turing determinística em tempo polinomial.
O que define a classe de complexidade NP?;A classe de problemas decidíveis para os quais uma solução pode ser verificada por uma máquina de Turing determinística em tempo polinomial.
O que são problemas NP-completos?;Problemas que são tanto NP quanto NP-difíceis, sendo os mais difíceis da classe NP.
Como a classe NP-difícil difere da NP-completa?;A NP-difícil inclui problemas pelo menos tão difíceis quanto os da NP, mas que não necessariamente pertencem à NP.
O que é complexidade de tempo?;A medida do tempo necessário para a execução de um algoritmo em função do tamanho da entrada.
O que é complexidade de espaço?;A medida da quantidade de memória necessária para a execução de um algoritmo em função do tamanho da entrada.
Qual a utilidade da redução em tempo polinomial?;Permite demonstrar que um problema pode ser transformado em outro em tempo polinomial, indicando sua equivalência em dificuldade.
Qual a importância do problema P vs NP?;Questiona se todos os problemas cuja solução pode ser verificada rapidamente também podem ser resolvidos rapidamente, com implicações em criptografia e otimização.
Qual é um exemplo de problema NP-completo?;O Problema do Caixeiro Viajante (TSP) é um exemplo clássico de problema NP-completo.
O que significa um problema ser tratável?;Significa que pode ser resolvido de forma eficiente, geralmente em tempo polinomial.