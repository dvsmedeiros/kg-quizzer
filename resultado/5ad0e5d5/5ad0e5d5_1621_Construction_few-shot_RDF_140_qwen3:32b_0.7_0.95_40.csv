pergunta;resposta
- If the object is a single literal or URI; create one row.
<subject> <predicate> "object1"; "object2" .
Thus; the code can be structured as follows:
3. For each triple; extract the predicate and object.
Now; putting this into code.
First; import necessary modules:
from rdflib import URIRef; Namespace
Now; read the Turtle data:
result = g.parse(data; format='turtle')
Then; query all triples where the subject is "http://dbpedia.org/resource/Construction".
    object_type = 'URI' if isinstance(o; URIRef) else 'Literal'
Now; testing with the given Turtle data:
Now; implement this in Python.
But the user wants the code in a code block; and the CSV output as a text block.
from rdflib import URIRef; Namespace
g.parse(data=data; format='turtle')
    if isinstance(o; URIRef):
    writer = csv.DictWriter(csvfile; fieldnames=fieldnames)
Now; testing this code with the given Turtle data.
ns1:wikiPageUsesTemplate <http://dbpedia.org/resource/Template:DEU> ; <http://dbpedia.org/resource/Template:Infobox> ;
The "wikiPageUsesTemplate" has two URIs; so two rows.
Thus; the code as written should produce the correct CSV.
from rdflib import URIRef; Namespace
    ns1:wikiPageUsesTemplate <http://dbpedia.org/resource/Template:DEU> ; <http://dbpedia.org/resource/Template:Infobox> ;
g.parse(data=data; format='turtle')
    object_type = 'URI' if isinstance(o; URIRef) else 'Literal'
    writer = csv.DictWriter(csvfile; fieldnames=fieldnames)