<think>
Alright, I need to generate a CSV with 10 question-answer pairs based on the provided context about computational complexity theory. Let me start by carefully reading through the context to identify key concepts and details that can form the basis of my questions.

First, the introduction mentions that computational complexity theory classifies problems based on resource usage. That's a good starting point for a question about what the theory focuses on.

Next, the text explains that a computational problem is a task solved by a computer using an algorithm. I can create a question asking how a computational problem is defined in this context.

The term "inherently difficult" comes up, referring to problems requiring significant resources regardless of the algorithm used. That’s perfect for another question about what makes a problem inherently hard.

Computational complexity theory uses mathematical models to formalize these concepts. So, I can ask which theories use such models.

Moving on, the P versus NP problem is highlighted as part of the Millennium Prize Problems. This is important enough for two separate questions: one identifying the problem related to computational complexity and another about its classification among prize problems.

The text also mentions other measures of complexity like communication, circuit, and parallel computing. I can ask which additional measures are used besides time and storage.

A key distinction between algorithm analysis and computational complexity theory is that the former looks at specific algorithms while the latter considers all possible algorithms. That’s a good basis for another question.

Computational complexity tries to classify problems based on resource restrictions, so a question about its goal in terms of classification makes sense.

Lastly, computability theory differs by focusing on what can be solved in principle rather than resource usage. This distinction can form the final question.

Now, I'll ensure each question is clear and concise, with answers that are short and accurate. Each pair should cover different aspects of the context to provide a comprehensive understanding of computational complexity theory.
</think>

```
pergunta;resposta
Qual é o foco principal da teoria de complexidade computacional?;Classificar problemas segundo o uso de recursos.
Como é definido um problema computacional?;Tarefa resolvida por um computador usando algoritmos.
O que torna um problema considerado intrinsecamente difícil?;Necessidade significativa de recursos, independentemente do algoritmo usado.
Qual teoria usa modelos matemáticos para estudo de problemas computacionais?;Teoria da complexidade computacional.
Qual problema famoso está relacionado à teoria de complexidade computacional e aos prêmios do milênio?;Problema P versus NP.
Quantos problemas são considerados pelos prêmios do milênio?;Sete.
Quais outros medidas de complexidade são usadas além do tempo e armazenamento?;Comunicação, circuitos e processadores.
Qual é a diferença principal entre análise de algoritmos e teoria da complexidade computacional?;Análise foca em recursos específicos, teoria em todos os possíveis.
Para que serve a classificação na teoria da complexidade computacional?;Para determinar limites práticos das tarefas computacionais.
Qual teoria se preocupa com o que pode ser resolvido em princípio?;Teoria da computabilidade.
```