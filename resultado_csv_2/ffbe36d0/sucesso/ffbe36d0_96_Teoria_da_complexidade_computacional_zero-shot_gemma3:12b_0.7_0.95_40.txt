```json
[
  {
    "pergunta": "O que a teoria da complexidade computacional busca analisar?",
    "resposta": "A teoria da complexidade computacional busca analisar a quantidade de recursos computacionais (tempo, memória, etc.) necessários para resolver um problema."
  },
  {
    "pergunta": "Qual a importância de classificar os problemas em diferentes classes de complexidade?",
    "resposta": "A classificação permite entender a viabilidade de resolver um problema com os recursos disponíveis e prever o comportamento de algoritmos para grandes volumes de dados."
  },
  {
    "pergunta": "O que define uma classe de complexidade?",
    "resposta": "Uma classe de complexidade define um conjunto de problemas que podem ser resolvidos por algoritmos com certas características de complexidade."
  },
  {
    "pergunta": "Qual a principal diferença entre problemas de complexidade P e NP?",
    "resposta": "Problemas em P podem ser resolvidos em tempo polinomial, enquanto problemas em NP possuem soluções que podem ser verificadas em tempo polinomial."
  },
  {
    "pergunta": "O que significa dizer que um problema é NP-completo?",
    "resposta": "Um problema é NP-completo se ele pertence a NP e todo outro problema em NP pode ser reduzido a ele em tempo polinomial."
  },
  {
    "pergunta": "Por que a questão da NP-completude é importante?",
    "resposta": "Se um algoritmo de tempo polinomial fosse encontrado para um problema NP-completo, isso implicaria que todo problema em NP poderia ser resolvido em tempo polinomial."
  },
  {
    "pergunta": "O que significa 'redução polinomial' no contexto da teoria da complexidade?",
    "resposta": "Redução polinomial é uma transformação que converte uma instância de um problema em uma instância de outro problema em tempo polinomial."
  },
  {
    "pergunta": "Qual o impacto da hipótese P ≠ NP?",
    "resposta": "Se a hipótese P ≠ NP for verdadeira, isso significaria que existem problemas que podem ser verificados rapidamente, mas não podem ser resolvidos rapidamente."
  },
  {
    "pergunta": "Como a teoria da complexidade computacional se relaciona com a otimização de algoritmos?",
    "resposta": "A teoria da complexidade ajuda a entender os limites teóricos de otimização, identificando algoritmos mais eficientes para problemas específicos."
  },
  {
    "pergunta": "Qual o papel da análise assintótica na teoria da complexidade?",
    "resposta": "A análise assintótica permite descrever o comportamento de um algoritmo à medida que o tamanho da entrada cresce, ignorando constantes e termos de ordem inferior."
  }
]
```