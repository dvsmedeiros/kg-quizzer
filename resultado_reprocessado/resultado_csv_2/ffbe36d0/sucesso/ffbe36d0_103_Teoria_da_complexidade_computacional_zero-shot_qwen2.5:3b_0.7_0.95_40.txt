```json
[
  {
    "pergunta": "O que é o Teorema de Pigeonhole em teoria da complexidade computacional?",
    "resposta": "É um teorema matemático que afirma que, se você tentar distribuir mais itens do que possíveis lugares para colocá-los, então pelo menos um dos lugares deve conter mais do que um item."
  },
  {
    "pergunta": "Qual é o significado de 'hard problem' em teoria da complexidade computacional?",
    "resposta": "'Hard problem' refere-se a problemas que são muito difíceis ou até impossíveis de resolver com algoritmos eficientes, mesmo para computadores superiores."
  },
  {
    "pergunta": "O que caracteriza um problema NP-completo na teoria da complexidade computacional?",
    "resposta": "Um problema é considerado NP-complexo se ele está em NP e é tão difícil quanto o mais difícil de todos os problemas em NP, ou seja, não existe um algoritmo eficiente para resolvê-lo."
  },
  {
    "pergunta": "Qual é a relação entre teoria da complexidade computacional e a criptografia?",
    "resposta": "A teoria da complexidade computacional é fundamental na criação de criptografia segura, pois determina quais algoritmos podem ser implementados para proteger dados contra ataques cibernéticos."
  },
  {
    "pergunta": "O que são problemas NP-hard e como eles se relacionam aos problemas NP-complexos?",
    "resposta": "Problemas NP-hard são tão difíceis quanto o mais difícil dos problemas em NP. Portanto, todos os problemas NP são também NP-hard."
  },
  {
    "pergunta": "O que é a teoria da complexidade computacional e qual é seu objetivo principal?",
    "resposta": "A teoria da complexidade computacional estuda como resolver problemas de forma eficiente em um computador, focando na classificação desses problemas segundo sua dificuldade."
  },
  {
    "pergunta": "Como os polinômios e o problema de clique são usados em teoria da complexidade computacional?",
    "resposta": "Os polinômios são utilizados para expressar a complexidade do algoritmo, enquanto o problema de clique é fundamental na classificação de problemas como NP, P ou co-NP."
  },
  {
    "pergunta": "O que é a decomposição de Bellman-Ford em teoria da complexidade computacional e onde é aplicada?",
    "resposta": "A decomposição de Bellman-Ford é uma técnica usada para resolver problemas de caminhos mínimos em grafos, especialmente quando há possibilidade de existência de ciclo negativo."
  },
  {
    "pergunta": "Qual é a diferença entre polinômio e exponencial em termos de complexidade computacional?",
    "resposta": "Um problema com complexidade polinomial pode ser resolvido por um algoritmo cujo tempo de execução é uma função polinomial da entrada, enquanto problemas com complexidade exponencial têm tempo de execução que cresce muito mais rápido ao aumentar a entrada."
  },
  {
    "pergunta": "Como a teoria da complexidade computacional pode ser usada para entender o problema de decisão binário?",
    "resposta": "A teoria da complexidade computacional fornece ferramentas para classificar problemas de decisão em categorias, como NP-completo, P ou co-NP, ajudando a compreender qual é mais provável que possa ter uma solução eficiente."
  }
]
```